import time

from .flash import Flash

FLASH_DR = 0x4004A000
FLASH_AR = 0x4004A004
FLASH_ER = 0x4004A008       # Erase Request
FLASH_CA = 0x4004A00C       # Cache Control
FLASH_SR = 0x4004A018

FLASH_SR_EIP  = (1 <<  0)   # Erase In Progress
FLASH_SR_PIP  = (1 <<  1)   # Program In Progress

FLASH_CA_CLR  = (1 << 18)   # Cache Clear

FLASH_ER_EREQ = (0xFF<<24)  # Erase Request


class SWM261(object):
    CHIP_CORE = 'Cortex-M0'

    PAGE_SIZE = 1024
    SECT_SIZE = 1024
    CHIP_SIZE = 0x40000     # 256K

    def __init__(self, xlink):
        super(SWM261, self).__init__()

        self.xlink = xlink

        self.xlink.reset()
        self.flash = Flash(self.xlink, SWM261_flash_algo)

        self.xlink.write_U32(0x400AA000, 1)     #HRC select 12MHz
        self.xlink.write_U32(0x40000000, 1)     #Core Clock select HRC

    def chip_erase(self):
        self.flash.Init(0, 0, 1)
        self.flash.EraseChip()
        self.flash.UnInit(1)

    def sect_erase(self, addr, size):
        for i in range(0, size // self.SECT_SIZE):
            print(f'Erase @ 0x{addr + self.SECT_SIZE * i:08X}')
            self.xlink.write_U32(FLASH_ER, FLASH_ER_EREQ | (addr + self.SECT_SIZE * i))
            while self.xlink.read_U32(FLASH_SR) & FLASH_SR_EIP: time.sleep(0.01)
        self.xlink.write_U32(FLASH_ER, 0)

        self.xlink.write_U32(FLASH_CA, self.xlink.read_U32(FLASH_CA) | FLASH_CA_CLR)

    def chip_write(self, addr, data):
        self.flash.Init(0, 0, 1)
        for i in range(0, len(data) // self.SECT_SIZE):
            self.flash.EraseSector(addr + self.SECT_SIZE*i)
        self.flash.UnInit(1)

        self.flash.Init(0, 0, 2)
        for i in range(0, len(data) // self.PAGE_SIZE):
            self.flash.ProgramPage(addr + self.PAGE_SIZE*i, data[self.PAGE_SIZE*i : self.PAGE_SIZE*(i+1)])
        self.flash.UnInit(2)

        self.flash.Init(0, 0, 3)
        for i in range(0, len(data) // self.PAGE_SIZE):
            self.flash.Verify(addr + self.PAGE_SIZE*i, data[self.PAGE_SIZE*i : self.PAGE_SIZE*(i+1)])
        self.flash.UnInit(3)

    def chip_read(self, addr, size, buff):
        self.xlink.write_U32(FLASH_CA, self.xlink.read_U32(FLASH_CA) | FLASH_CA_CLR)
        
        data = self.xlink.read_mem(addr, size)

        buff.extend(list(data))



SWM261_flash_algo = {
    'load_address' : 0x20000000,
    'instructions' : [
        0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,
        0x4770BA40, 0x4770BA40, 0x4770BA40, 0x4770BA40, 0x4770BA40, 0x4770BAC0, 0x4770BAC0, 0x4770BAC0,
        0x4770BAC0, 0x4770BAC0, 0xD1222A01, 0x2100B672, 0x43C94828, 0x48286001, 0x62022255, 0x62424A27,
        0xF3BF6281, 0xF3BF8F4F, 0xBF008F6F, 0x2100BF00, 0x62816241, 0x48226201, 0x08496941, 0x61410049,
        0x68810440, 0x43111142, 0x491E6081, 0x4449200C, 0x20006008, 0x20004770, 0x49194770, 0xBF00E000,
        0x28006988, 0x4818DAFB, 0x20006088, 0x444A4A15, 0xE0016812, 0x1C40BF00, 0xD3FB4290, 0xBF00E000,
        0x07C06988, 0x68C8D1FB, 0x04922201, 0x60C84310, 0x47702000, 0xF000B510, 0x2000F91D, 0xB510BD10,
        0x1DC94613, 0x004A08C9, 0xF0004619, 0x2000F924, 0x0000BD10, 0xE000E180, 0x40000700, 0xFDFFFFFF,
        0x4004A000, 0x00000014, 0xFF03FFFF, 0x250FB570, 0xD2092908, 0x008C6806, 0x43AE40A5, 0x68056006,
        0x431540A2, 0xE00A6005, 0x460C6846, 0x00A43C08, 0x43AE40A5, 0x68456046, 0x431540A2, 0x24036045,
        0x22010224, 0x1900408A, 0xD0032B00, 0x43116801, 0xBD706001, 0x43916801, 0xBD706001, 0xB081B5FF,
        0x460E4605, 0x4C684617, 0x03614868, 0x22011828, 0xD0352800, 0x1A8014CA, 0x1A80D036, 0x4290D03B,
        0x6888D105, 0x43102208, 0x4C5F6088, 0x23013430, 0x46312200, 0xF7FF4620, 0x2001FFB9, 0x2F0140B0,
        0x6869D030, 0x60694381, 0x29019904, 0x1DE1D02E, 0x680A31F9, 0x600A4382, 0x2901990A, 0x1DE1D02C,
        0x31FA31FF, 0x4382680A, 0x2101600A, 0x02899A0B, 0xD0282A01, 0x680A1861, 0x600A4382, 0xBDF0B005,
        0x43106888, 0xE7D26088, 0x22026888, 0x60884310, 0x34104C45, 0x6888E7CB, 0x43102204, 0x4C426088,
        0xE7C43420, 0x43016869, 0xE7CD6069, 0x31F91DE1, 0x4302680A, 0xE7CF600A, 0x31FF1DE1, 0x680A31FA,
        0x600A4302, 0x1861E7D1, 0x4302680A, 0xE7D5600A, 0x23016802, 0x431A408B, 0x47706002, 0x23016802,
        0x439A408B, 0x47706002, 0x23016802, 0x405A408B, 0x47706002, 0x40C86B00, 0x0FC007C0, 0x23104770,
        0x4A2B1A9B, 0x680340DA, 0x4313408A, 0x47706003, 0x1A9B2310, 0x40DA4A26, 0x408A6803, 0x60034393,
        0x23104770, 0x4A221A9B, 0x680340DA, 0x4053408A, 0x47706003, 0x1A9B2310, 0x40DA4A1D, 0x40C86B00,
        0x47704010, 0x00892201, 0x64021808, 0x22004770, 0x18080089, 0x47706402, 0x18080089, 0x22016C01,
        0x64011A51, 0x23104770, 0x4A111A9B, 0xB67240DA, 0x408A6803, 0x60034313, 0x4770B662, 0x1A9B2310,
        0x40DA4A0B, 0x6803B672, 0x4393408A, 0xB6626003, 0x23104770, 0x4A061A9B, 0xB67240DA, 0x408A6803,
        0x60034053, 0x4770B662, 0x400A0000, 0xBFFC0000, 0x0000FFFF, 0xB672B510, 0x4A1A0A80, 0x444A4918,
        0x47906852, 0x68C14818, 0x04922201, 0x60C14311, 0x2000B662, 0xB510BD10, 0x0852B672, 0x444B4B11,
        0x4798689B, 0x68C14810, 0x04922201, 0x60C14311, 0x2000B662, 0xB510BD10, 0x4B0CB672, 0x49084A09,
        0x6812444A, 0xD2022821, 0x47904618, 0x2842E006, 0x4618D202, 0xE0014790, 0x47904805, 0xBD10B662,
        0x0B11FFAC, 0x00000004, 0x4004A000, 0x00089241, 0x0008A241, 0x2201B510, 0x68100792, 0x49AC4CAD,
        0x444C07C0, 0x6021D001, 0x6810E021, 0x0F4006C0, 0x2801D006, 0x2803D008, 0x2804D010, 0xE00FD111,
        0x0200207D, 0xE00C6020, 0x680048A3, 0xD5010780, 0xE0006021, 0x48A16021, 0xE0026020, 0xE0006021,
        0x68106021, 0xD5020780, 0x08C06820, 0x499C6020, 0xF0006820, 0x6060F945, 0x4997BD10, 0x39402001,
        0x07816008, 0x4302680A, 0x4770600A, 0xF7FFB500, 0x4891FFF4, 0x61012101, 0x60410600, 0x221C6801,
        0x60014391, 0x60016801, 0x22026801, 0x60014391, 0x08496801, 0x60010049, 0xB510BD00, 0x69024889,
        0x438A2106, 0x48886102, 0x438A6902, 0x4C856102, 0x3CF02300, 0x21012207, 0xF7FF4620, 0x2300FE57,
        0x21022207, 0xF7FF4620, 0x497BFE51, 0x6A083940, 0x43104A7E, 0x20006208, 0x00C9217D, 0x1C40BF00,
        0xD3FB4288, 0x68014874, 0x43912202, 0x68416001, 0x40114A77, 0x68416041, 0x43114A76, 0x68016041,
        0x43912204, 0x68C16001, 0xD0FC2900, 0x22016801, 0x60014311, 0xB510BD10, 0xF7FF4604, 0xF7FFFF9E,
        0x2001FFBC, 0x60480781, 0x221C6808, 0x60084390, 0x22046808, 0x60084310, 0x2C002202, 0x6808D003,
        0x60084310, 0x6808E002, 0x60084390, 0x08406808, 0x60080040, 0xB570BD10, 0xF7FF4604, 0x4859FF7E,
        0x22066901, 0x61014391, 0x69014857, 0x61014391, 0x23004D54, 0x22073DF0, 0x46282101, 0xFDF6F7FF,
        0x22072300, 0x46282102, 0xFDF0F7FF, 0x3840484A, 0x4A4E6A01, 0x62014311, 0x207D2100, 0xBF0000C0,
        0x42811C49, 0x2101D3FB, 0x60410788, 0x221C6801, 0x60014391, 0x220C6801, 0x60014311, 0x2C002202,
        0x6801D003, 0x60014311, 0x6801E002, 0x60014391, 0x08496801, 0x60010049, 0xB500BD70, 0xFF3DF7FF,
        0x07882101, 0x68016041, 0x4391221C, 0x68016001, 0x43112210, 0x68016001, 0x43112202, 0x68016001,
        0x00490849, 0xBD006001, 0x2001B510, 0x68810780, 0x43111142, 0x4C306081, 0x0F4069E0, 0xD1052805,
        0x492569E0, 0x08C000C0, 0x60883940, 0xF7FF205A, 0xF7FFFEC2, 0xF7FFFF12, 0x481EFEDD, 0x44484920,
        0xF0006800, 0xF7FFF84D, 0x2105FEB6, 0x04094823, 0xBF0060C1, 0xBF00BF00, 0xBF00BF00, 0xBF00BF00,
        0x04092103, 0x481860C1, 0x22036901, 0x43910292, 0x48146101, 0x22056901, 0x43910312, 0x480E6101,
        0x09096B41, 0x63410109, 0x68E26B41, 0x0F120712, 0x63414311, 0x220F6B41, 0x43910512, 0x6B416341,
        0x031268E2, 0x05120F12, 0x63414311, 0x0000BD10, 0x00B71B00, 0x00000010, 0x400AA040, 0x055D4A80,
        0x000F4240, 0x400A0100, 0x400A0200, 0x00070022, 0xFCE0FE00, 0x0003002D, 0x40000080, 0x4004A000,
        0x460BB530, 0x20004601, 0x24012220, 0x460DE009, 0x429D40D5, 0x461DD305, 0x1B494095, 0x40954625,
        0x46151940, 0x2D001E52, 0xBD30DCF1, 0x00000000, 0x110004C1, 0x11000401, 0x11000451, 0x00B71B00,
        0x0000000C
    ],

    'pc_Init'            : 0x20000049,
    'pc_UnInit'          : 0x20000097,
    'pc_EraseSector'     : 0x200000D5,
    'pc_ProgramPage'     : 0x200000DF,
    'pc_Verify'          : 0x12000001F,
    'pc_EraseChip'       : 0x2000009B,
    'pc_BlankCheck'      : 0x12000001F,
    'pc_Read'            : 0x12000001F,
    
    'static_base'        : 0x200006AC,
    'begin_data'         : 0x200006C4,
    'begin_stack'        : 0x20000EC4,

    'analyzer_supported' : False,

    # Relative region addresses and sizes
    'ro_start'           : 0x00000000,
    'ro_size'            : 0x0000068C,
    'rw_start'           : 0x0000068C,
    'rw_size'            : 0x00000018,
    'zi_start'           : 0x000006A4,
    'zi_size'            : 0x00000000,

    # Flash information
    'flash_start'        : 0x00000000,
    'flash_size'         : 0x00040000,
    'flash_page_size'    : 0x00000400,
    'sector_sizes': (
        (0x00000, 0x00400),
    )
}
